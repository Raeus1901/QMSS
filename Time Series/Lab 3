## Time Series Lab

## Questions:
## 1. Create a multivariate time series; perform any interpolations.
## 2. Graph the relationships between X and Y. Explain how you think Y should relate to your key Xs.
## 3. Run a simple time series regression, with one X and no trend. Interpret it.
## 4. Run a time series regression with one X and trend. Interpret it. Perform autocorrelation diagnostics. Explain what you found.
## 5. Consider running a time series regression with many Xs and trend. Interpret that. Check VIF.
## 6. Run a first differenced time series regression. Interpret that.
## 7. Check your variables for unit roots. Do some tests. Interpret them.
## 8. Perform an Automatic ARIMA on the residuals from one of your earlier models. Tell me what it says.
## 9. Run an ARIMA that follows from Step 8. Interpret that, too.

GSS = read.csv(file.choose()) ## choose the GSS Trends file. ##
## install.packages("devtools", dependencies = TRUE)
## library(devtools)
## install_github("jgabry/QMSS_package")
## install.packages("ggplot2")
## install.packages("plyr")
install.packages("car")
install.packages("fUnitRoots")

# load packages
library(QMSS)
library(ggplot2)
library(plyr)
library(car)
library(fUnitRoots)
library(lmtest)

## 1. Create a multivariate time series ##
## For the Unites States, from 1975 to 1995, try to predict average positive response to racmar
## (Do you think there should be laws against marriages between (Negroes/Blacks/African-Americans) and whites?)
## The average response comes from above 30 years old Democrats men with at least a BA

vars <- c("year", "sex", "age", "partyid", "degree", "racmar")
sub <- GSS[, vars]

sub <- mutate(sub,
              nracmar = ifelse(racmar == 2, 1, 0),
              Men = ifelse(sex == 1, 1, 0),
              BA = ifelse(degree >= 3, 1, 0),
              BA30Men = ifelse(BA == 1 & age > 30, 1, 0 & Men == 1),
              StrongDem = ifelse(partyid == 0, 1, 0),
              SlightDem = ifelse(partyid == 1, 1, 0))

# get means by year
# by.year <- aggregate(subset(sub, sel = -year), list(year = sub$year), mean, na.rm = T)

# interpolate for some missing years
# add the extra years
by.year[30:40, "year"] <- c(1979, 1981, 1992, 1995, seq(1997, 2009, 2))
by.year <- arrange(by.year, year)

# make a time series object by.year.ts and interpolate using na.approx
by.year.ts <- ts(by.year)
by.year.ts <- na.approx(by.year.ts)

# calculate pct gender, percent fulltime, percent under 50 with BA
by.year.ts <- as.data.frame(by.year.ts)
by.year.ts <- mutate(by.year.ts,
                     Dem = StrongDem + SlightDem,
                     Dem_pct = Dem*100,
                     BA30Men_pct = BA30Men*100)

# only keep up to 1995 and convert back to time series object
# by.year.ts <- ts(subset(by.year.ts, year <= 1995))

by.year.ts

# correlations
cor.vars <- c("nracmar", "BA30Men_pct", "Dem_pct", "year", "age")
cor.dat <- by.year.ts[, cor.vars]
install.packages("corrplot")
library(corrplot)
corrplot(cor(cor.dat))

## 2. Graph the relationships between X and Y.
# First install the reshape2 package if not already installed
# install.packages("reshape2")
library(reshape2)

meltMyTS <- function(mv.ts.object, time.var, keep.vars){
  # mv.ts.object = a multivariate ts object
  # keep.vars = character vector with names of variables to keep
  
  # time.var = character string naming the time variable
  require(reshape2)
  if(missing(keep.vars)) {
    melt.dat <- data.frame(mv.ts.object)
  } else {
    if (!(time.var %in% keep.vars)){
      keep.vars <- c(keep.vars, time.var)
    }
    melt.dat <- data.frame(mv.ts.object)[, keep.vars]
  }
  melt.dat <- melt(melt.dat, id.vars = time.var)
  colnames(melt.dat)[which(colnames(melt.dat) == time.var)] <- "time"
  return(melt.dat)
}

# Make a character vector naming the variables we might want to plot
keep.vars <- c("nracmar", "BA30Men_pct", "Dem_pct", "year", "age")

# Use meltMyTS to transform the data to a 3-column dataset containing a column
# for time, a column for variable names,
# and a column of values corresponding to the variable names
plot.dat <- meltMyTS(mv.ts.object = by.year.ts, time.var = "year", keep.vars = keep.vars)
plot.dat

# Use ggMyTS to plot any of the variables or multiple variables together
ggMyTS <- function(df, varlist, line = TRUE, point = TRUE, pointsize = 3, linewidth = 1.25, ...){
  require(ggplot2)
  
  # varlist = character vector with names of variables to use
  if(missing(varlist)){
    gg <- ggplot(df, aes(time, value, colour = variable))
  } else {
    include <- with(df, variable %in% varlist)
    gg <- ggplot(df[include,], aes(time, value, colour = variable))
  }
  if(line == FALSE & point == FALSE) {
    stop("At least one of 'line' or 'point' must be TRUE")
  } else {
    if(line == TRUE) gg <- gg + geom_line(size = linewidth, aes(color = variable), ...)
    if(point == TRUE) gg <- gg + geom_point(size = pointsize, aes(color = variable), ...)
  }
  gg + xlab("") + theme(legend.position = "bottom") + scale_x_continuous(breaks = min(df$time):max(df$time))
}
(g_Dem <- ggMyTS(df = plot.dat, varlist = c("Dem_pct")))

## 3. Run a simple time series regression, with one X and no trend. Interpret it.
linear.model <- lm(nracmar ~ Dem_pct, data = by.year.ts)
summary(linear.model)

## 4. Run a time series regression with one X and trend. Interpret it. Perform autocorrelation diagnostics. Explain what you found.
linear.model.trend <- lm(nracmar ~ Dem_pct + year, data = by.year.ts)
summary(linear.model.trend)

# Check for autocorrelation
dwtest(linear.model.trend)

## 5. Consider running a time series regression with many Xs and trend. Interpret that. Check VIF.
linear.model.multiX <- lm(nracmar ~ Dem_pct + BA30Men_pct + year, data = by.year.ts)
summary(linear.model.multiX)

# Check VIF
vif(linear.model.multiX)

## 6. Run a first differenced time series regression. Interpret that.
diff.by.year.ts <- diff(by.year.ts)
diff.linear.model <- lm(nracmar ~ Dem_pct + BA30Men_pct, data = diff.by.year.ts)
summary(diff.linear.model)

## 7. Check your variables for unit roots. Do some tests. Interpret them.
adfTest(by.year.ts$nracmar, lags = 1)
adfTest(by.year.ts$Dem_pct, lags = 1)
adfTest(by.year.ts$BA30Men_pct, lags = 1)

## 8. Perform an Automatic ARIMA on the residuals from one of your earlier models. Tell me what it says.
library(forecast)
auto.arima(residuals(linear.model.trend))

## 9. Run an ARIMA that follows from Step 8. Interpret that, too.
arima.model <- arima(by.year.ts$nracmar, order = c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 1))
summary(arima.model)
