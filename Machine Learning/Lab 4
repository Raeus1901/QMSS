{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMuxO3fnrXCcedqoNZaIBXw",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Raeus1901/QMSS/blob/main/homework_4_ml.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Part 1: Build a classification model using text data**\n",
        "\n",
        "In part one of the homework, you will solve a text classification task.\n",
        "\n",
        "The training data is also stored in the HW 4 data folder.   You can import it and train test split it to generate your data for this assignment.\n",
        "\n",
        "If you have any difficulty reading in the data, try to use the squeeze argument in pandas read_csv()\n",
        "\n"
      ],
      "metadata": {
        "id": "kSoSEQEz-Rkr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Squeeze argument is deprecated, I will use append .squeeze (\"columns\") instaed\n",
        "from sklearn.datasets import fetch_20newsgroups\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "import pandas as pd\n",
        "from sklearn.pipeline import Pipeline\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "from google.colab import drive\n",
        "\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "X_train = pd.read_csv(\"/content/drive/My Drive/X_train.csv\").squeeze(\"columns\")\n",
        "y_train_labels = pd.read_csv(\"/content/drive/My Drive/y_train.csv\").squeeze(\"columns\")\n",
        "\n",
        "\n",
        "#one encode Y data\n",
        "y_train = pd.get_dummies(y_train_labels)\n",
        "\n",
        "X_train.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R15fpCeeC8tC",
        "outputId": "4ecc6e05-4973-46d0-d049-19f2b4fc616e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       MyBook Disk Drive Handles Lots of Easy Backups\n",
              "1                       CIT Posts Eighth Loss in a Row\n",
              "2    Candy Carson Singing The \"National Anthem\" Is ...\n",
              "3    Why You Need To Stop What You're Doing And Dat...\n",
              "4    27 Times Adele Proved She's Actually The Reale...\n",
              "Name: headline, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Verify the Lengths\n",
        "print(\"Length of X_train:\", len(X_train))\n",
        "print(\"Length of y_train_labels:\", len(y_train_labels))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "17wA2TxqwGNB",
        "outputId": "3d1d736d-32ff-458e-f4f8-2ab723baf854"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length of X_train: 24979\n",
            "Length of y_train_labels: 24979\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The data consists of headlines that signify clickbait or not.  Training and test data are stored in the following objects: X_train, X_test, y_train_labels, y_test_labels.  The remaining objects can be ignored.\n",
        "\n",
        "In a real application this might allow us to find out what is hard news information (or perhaps to choose among headlines that are more likely to be clicked).\n",
        "\n"
      ],
      "metadata": {
        "id": "_0-o1UCZC0kt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The printed information confirms the following:\n",
        "\n",
        "Vectorized DataFrame (X_df): The DataFrame contains 1000 columns, each representing a different feature (word or phrase) extracted from the headlines. The TF-IDF scores in the cells quantify the importance of each word in the corresponding headline relative to the entire dataset.  \n",
        "\n",
        "\n",
        "Type of X_train_cleaned: It's a pandas.core.series.Series, indicating that the cleaned text data is stored as a Pandas Series.\n",
        "\n",
        "\n",
        "Length of X_train_cleaned: There are 24,979 entries in the cleaned text data, showing the scale of the dataset.\n",
        "\n",
        "\n",
        "Example of a Cleaned Text: The example headline provided has been cleaned to remove unnecessary characters, punctuation, and converted to lowercase, which is evident in the output."
      ],
      "metadata": {
        "id": "kCaw057LZUBO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "To complete part one of the homework do the following:\n",
        "\n",
        " **Import the text data, vectorize the clickbait headline column into an X matrix.  Then run logistic regression at least three times and select a single best model.  Note that you should create three logistic regression models with different different tokenization approaches.  You should not change your modeling approach, you should simply experiment with different tokenizers. Use cross-validation to evaluate the results. Use a robust metric for classification  (AUC or F1-Score for example), and inspect all models by visualizing the coefficients. (See helper function in our in class notebook for text models.) Be sure to explain your choices and evaluate your models using cross validation and using test set data.**"
      ],
      "metadata": {
        "id": "JmdQ-hakBa-f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "! pip install pyprind"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YVqOyLDzTMjl",
        "outputId": "25ef00ff-40d6-4c24-e457-864192e0e832"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pyprind\n",
            "  Downloading PyPrind-2.11.3-py2.py3-none-any.whl (8.4 kB)\n",
            "Installing collected packages: pyprind\n",
            "Successfully installed pyprind-2.11.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "First, let's apply the helper function; this would to vizualize the data based upon positive and negative feelings through coefficients."
      ],
      "metadata": {
        "id": "WozatBHMAPf9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# helper function to plot top positive and negative coefficients\n",
        "\n",
        "def visualize_coefficients(coefficients, feature_names, n_top_features=25):\n",
        "    \"\"\"Visualize coefficients of a linear model.\n",
        "    Parameters\n",
        "    ----------\n",
        "    coefficients : nd-array, shape (n_features,)\n",
        "        Model coefficients.\n",
        "    feature_names : list or nd-array of strings, shape (n_features,)\n",
        "        Feature names for labeling the coefficients.\n",
        "    n_top_features : int, default=25\n",
        "        How many features to show. The function will show the largest (most\n",
        "        positive) and smallest (most negative)  n_top_features coefficients,\n",
        "        for a total of 2 * n_top_features coefficients.\n",
        "    \"\"\"\n",
        "    coefficients = coefficients.squeeze()\n",
        "    if coefficients.ndim > 1:\n",
        "        # this is not a row or column vector\n",
        "        raise ValueError(\"coeffients must be 1d array or column vector, got\"\n",
        "                         \" shape {}\".format(coefficients.shape))\n",
        "    coefficients = coefficients.ravel()\n",
        "\n",
        "    if len(coefficients) != len(feature_names):\n",
        "        raise ValueError(\"Number of coefficients {} doesn't match number of\"\n",
        "                         \"feature names {}.\".format(len(coefficients),\n",
        "                                                    len(feature_names)))\n",
        "    # get coefficients with large absolute values\n",
        "    coef = coefficients.ravel()\n",
        "    positive_coefficients = np.argsort(coef)[-n_top_features:]\n",
        "    negative_coefficients = np.argsort(coef)[:n_top_features]\n",
        "    interesting_coefficients = np.hstack([negative_coefficients,\n",
        "                                          positive_coefficients])\n",
        "    # plot them\n",
        "    plt.figure(figsize=(15, 5))\n",
        "    colors = ['#ff2020' if c < 0 else '#0000aa'\n",
        "              for c in coef[interesting_coefficients]]\n",
        "    plt.bar(np.arange(2 * n_top_features), coef[interesting_coefficients],\n",
        "            color=colors)\n",
        "    feature_names = np.array(feature_names)\n",
        "    plt.subplots_adjust(bottom=0.3)\n",
        "    plt.xticks(np.arange(1, 1 + 2 * n_top_features),\n",
        "               feature_names[interesting_coefficients], rotation=60,\n",
        "               ha=\"right\")\n",
        "    plt.ylabel(\"Coefficient magnitude\")\n",
        "    plt.xlabel(\"Feature\")"
      ],
      "metadata": {
        "id": "3KJ6VzCEQAbp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Logistic regression, a statistical method for analyzing datasets in which there are one or more independent variables that determine an outcome, is employed here to categorize text data into binary classes. The process is not straightforward when dealing with text, as it involves transforming string variables into a format that the model can understand and use for prediction.\n",
        "\n",
        "In this context, the target variable, `y_labels`, is already in a binary format, labeling each headline as 'clickbait' or 'non-clickbait'. The task then is to apply these labels to `X_train` to determine the likelihood of words being indicative of clickbait or not. Logistic regression will assign a probability between 0 (non-clickbait) and 1 (clickbait) to the tokens derived from the text data.\n",
        "\n",
        "Tokenization in text analysis is the process of breaking down text into individual elements, typically words or phrases. While more sophisticated tokenization methods are available through packages like BERT or LSTM/transformer models, the TfidfVectorizer within Scikit-learn is capable of performing this task sufficiently for many applications. TF-IDF stands for Term Frequency-Inverse Document Frequency, a numerical statistic that reflects how important a word is to a document in a collection or corpus.\n",
        "\n",
        "Here, we explore three different tokenization methods to preprocess our text data:\n",
        "\n",
        "1) **Stop word removal**: This is the most straightforward approach where common words, which are usually filtered out before processing text, are removed. These are words that are frequent in the language but carry less meaningful information about the document's content.\n",
        "\n",
        "2) **Advanced word tokenization**: This method involves using more sophisticated techniques that may consider the context in which a word is used. This can include handling different word forms, such as plurals or tenses, and can often result in better model performance due to a more nuanced understanding of the text.\n",
        "\n",
        "3) **Wordpiece tokenization**: Wordpiece tokenization involves breaking words down into sub-word units. This can help the model to handle rare words better, as well as understand the meaning of words from their parts, which is particularly useful for languages with rich morphology or for handling names and technical terms.\n",
        "\n",
        "The logistic regression models will be tuned using GridSearch to find the best regularization strength parameter 'C'. This parameter controls the trade-off between achieving a low training error and a low testing error that is the key to a good generalization. The best 'C' parameter will be determined for each tokenization method, ensuring the model is neither overfitting nor underfitting.\n",
        "\n",
        "Each model will undergo a 5-fold cross-validation process, which is a standard approach to estimate the skill of the model on new data. This involves partitioning the data into 5 sets, training on 4, and validating on the 5th, and repeating this process five times to reduce variability.\n",
        "\n",
        "Finally, for visualization, the top 30 features (words or tokens) by their absolute coefficients in the logistic regression model will be displayed. This visualization will help to interpret the model by showing which words are most strongly associated with clickbait and non-clickbait headlines, providing insights into the predictive power of the features."
      ],
      "metadata": {
        "id": "wUWOZy26AIM9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1) Now let's beging with stop word removal"
      ],
      "metadata": {
        "id": "126Ih_NaT5Q2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS\n",
        "print(\"Number of stop words: {}\".format(len(ENGLISH_STOP_WORDS)))\n",
        "print(\"Every 10th stopword:\\n{}\".format(list(ENGLISH_STOP_WORDS)[::10]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V-dMXAaTF7Fw",
        "outputId": "b088c842-2da2-43fb-c95d-7981dfbac61c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of stop words: 318\n",
            "Every 10th stopword:\n",
            "['everywhere', 'thence', 'cannot', 'whom', 'amoungst', 'between', 'nor', 'seemed', 'them', 'less', 'latterly', 'made', 'here', 'always', 'thereupon', 'own', 'without', 'whither', 'moreover', 'nothing', 'beside', 'six', 'an', 'for', 'at', 'with', 'a', 'became', 'there', 'de', 'every', 'next']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Relative to the 25000 observations, there is not a lot of stop words. It is expected this model may perform poorly compared to the two others following."
      ],
      "metadata": {
        "id": "F_yr9BsUGDfz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import re\n",
        "\n",
        "\n",
        "# Function to clean the text data\n",
        "def clean_text(text):\n",
        "    text = re.sub(r'<.*?>', '', text)  # Remove any HTML tags\n",
        "    text = text.lower()  # Convert text to lowercase\n",
        "    text = re.sub(r'[^a-z]', ' ', text)  # Remove punctuations and numbers\n",
        "    text = re.sub(r'\\s+[a-zA-Z]\\s+', ' ', text)  # Remove single character terms\n",
        "    text = re.sub(r'\\s+', ' ', text, flags=re.I)  # Remove extra spaces\n",
        "    return text\n",
        "\n",
        "# Clean the text data in X_train\n",
        "X_train_cleaned = X_train.apply(clean_text)\n",
        "\n"
      ],
      "metadata": {
        "id": "x0ciWjkVUC7z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS\n",
        "import pandas as pd\n",
        "import re\n",
        "\n",
        "# Vectorize the text data\n",
        "vectorizer = TfidfVectorizer(max_features=1000, stop_words='english')\n",
        "X_vectorized = vectorizer.fit_transform(X_train)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train_split, X_test_split, y_train_split, y_test_split = train_test_split(X_vectorized, y_train_labels, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "2yhPuXU3rewj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "# Assuming X_train and y_train_labels are your text data and labels\n",
        "\n",
        "# Step 1: Vectorize the text data\n",
        "vectorizer = TfidfVectorizer(max_features=1000, stop_words='english')\n",
        "X_vectorized = vectorizer.fit_transform(X_train)\n",
        "\n",
        "# Step 2: Split the data into training and testing sets\n",
        "X_train_split, X_test_split, y_train_split, y_test_split = train_test_split(X_vectorized, y_train_labels, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 3: Grid Search with Cross-Validation\n",
        "param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100]}\n",
        "grid = GridSearchCV(LogisticRegression(max_iter=10000), param_grid, cv=5)\n",
        "grid.fit(X_train_split, y_train_split)\n",
        "\n",
        "# Output the results\n",
        "print(\"Best cross-validation score: {:.2f}\".format(grid.best_score_))\n",
        "print(\"Best parameters: \", grid.best_params_)\n",
        "\n",
        "# Classification report and ROC-AUC score\n",
        "print(classification_report(y_test, y_pred))\n",
        "label_encoder = LabelEncoder()\n",
        "y_test_encoded = label_encoder.fit_transform(y_test)\n",
        "y_pred_encoded = label_encoder.transform(y_pred)\n",
        "roc_auc = roc_auc_score(y_test_encoded, y_pred_encoded)\n",
        "print(\"ROC-AUC Score:\", roc_auc)\n",
        "print(\"Best Parameters:\", grid.best_params_)\n",
        "print(\"Best Score:\", grid.best_score_)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EsIeeCw0sYsl",
        "outputId": "6f97417b-d3d5-4adb-a92a-39f6163a4212"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best cross-validation score: 0.92\n",
            "Best parameters:  {'C': 1}\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "    clickbait       0.92      0.90      0.91      2386\n",
            "not clickbait       0.91      0.93      0.92      2610\n",
            "\n",
            "     accuracy                           0.92      4996\n",
            "    macro avg       0.92      0.92      0.92      4996\n",
            " weighted avg       0.92      0.92      0.92      4996\n",
            "\n",
            "ROC-AUC Score: 0.9166727686729422\n",
            "Best Parameters: {'C': 1}\n",
            "Best Score: 0.9227848063224595\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The provided scores and metrics indicate a high-performing logistic regression model based on stop word removal tokenization. Let's break down each part of the output:\n",
        "\n",
        "1. **Best cross-validation score: 0.92**\n",
        "   - This score represents the average accuracy across the 5 folds of cross-validation, which is quite high. A score of 0.92 suggests that the model correctly predicts whether a headline is clickbait or not 92% of the time on the validation sets used during training.\n",
        "\n",
        "2. **Best parameters: {'C': 1}**\n",
        "   - The parameter 'C' corresponds to the inverse of regularization strength; smaller values specify stronger regularization. A 'C' value of 1 indicates a good balance between bias and variance, leading to a model that generalizes well to unseen data without overfitting.\n",
        "\n",
        "3. **Classification Report**\n",
        "   - **Precision** (clickbait: 0.92, not clickbait: 0.91): Precision measures the accuracy of the positive predictions. For clickbait, 92% of the headlines predicted as clickbait are indeed clickbait, and for non-clickbait, 91% of the headlines predicted as non-clickbait are truly non-clickbait.\n",
        "   - **Recall** (clickbait: 0.90, not clickbait: 0.93): Recall measures the ability of the classifier to find all the positive samples. Here, the model identified 90% of all actual clickbait and 93% of all actual non-clickbait.\n",
        "   - **F1-score** (clickbait: 0.91, not clickbait: 0.92): The F1 score is a weighted harmonic mean of precision and recall. The scores close to 1 indicate a model with perfect precision and recall. The model shows a slightly better F1-score for non-clickbait headlines.\n",
        "\n",
        "4. **Accuracy: 0.92**\n",
        "   - This is the proportion of correct predictions over the total number of cases examined. Given that the accuracy is the same as the cross-validation score, it suggests the model's performance is consistent across both training and test sets.\n",
        "\n",
        "5. **ROC-AUC Score: 0.9167**\n",
        "   - The ROC-AUC score indicates the model's ability to discriminate between the positive and negative classes. A score close to 1 means excellent discriminative ability. With a score of approximately 0.917, this model discriminates well between clickbait and non-clickbait headlines.\n",
        "\n",
        "6. **Best Score: 0.9227848063224595**\n",
        "   - This score likely represents the best mean cross-validation score achieved during the grid search. It confirms the model's high performance and is consistent with the best cross-validation score.\n",
        "\n",
        "In summary, the model demonstrates excellent performance in distinguishing between clickbait and non-clickbait headlines, with high marks across all metrics. The regularization strength appears well-tuned, and the model is effective in generalizing from the training data to the test data."
      ],
      "metadata": {
        "id": "zv-n7SHAIro5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Extract coefficients and feature names for visualization\n",
        "coefs = log_reg_model.coef_[0]\n",
        "feature_names = vectorizer.get_feature_names_out()\n",
        "\n",
        "# Visualize the coefficients\n",
        "visualize_coefficients(coefs, feature_names, n_top_features=30)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 307
        },
        "id": "WjeZ_hRfAHo7",
        "outputId": "fd283079-adbc-42b6-bd35-a5fa2dba0b04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "For the words on the right side (positive coefficients):\n",
        "\n",
        "\"dies\"\n",
        "\"killed\"\n",
        "\"uk\"\n",
        "\"obama\"\n",
        "These are likely to be strong predictors for clickbait. It means that the presence of these words in a headline is associated with a higher likelihood that the headline is clickbait. This could be due to the fact that dramatic or emotionally charged words like \"dies\" and \"killed\" are often used to attract attention in clickbait headlines. Names of countries or public figures like \"uk\" or \"obama\" might also be more common in sensational news designed to draw in readers.\n",
        "\n",
        "For the words on the left side (negative coefficients):\n",
        "\n",
        "\"things\"\n",
        "\"know\"\n",
        "\"people\"\n",
        "These words are associated with a lower likelihood of the headline being clickbait. Their presence in a headline might suggest a more informative or neutral tone, rather than an attempt to generate clicks through sensationalism or emotional appeal."
      ],
      "metadata": {
        "id": "2Vv5qmTvF0dg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Second model: Advanced word tokenization"
      ],
      "metadata": {
        "id": "VUZeWyelx_1J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import re\n",
        "\n",
        "\n",
        "# Function to clean the text data\n",
        "def clean_text(text):\n",
        "    text = re.sub(r'<.*?>', '', text)  # Remove any HTML tags\n",
        "    text = text.lower()  # Convert text to lowercase\n",
        "    text = re.sub(r'[^a-z]', ' ', text)  # Remove punctuations and numbers\n",
        "    text = re.sub(r'\\s+[a-zA-Z]\\s+', ' ', text)  # Remove single character terms\n",
        "    text = re.sub(r'\\s+', ' ', text, flags=re.I)  # Remove extra spaces\n",
        "    return text\n",
        "\n",
        "# Clean the text data in X_train\n",
        "X_train_cleaned = X_train.apply(clean_text)\n",
        "\n"
      ],
      "metadata": {
        "id": "93uKWavQyEM3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS\n",
        "import pandas as pd\n",
        "import re\n",
        "\n",
        "# Vectorize the text data with advanced word tokenization\n",
        "vectorizer = TfidfVectorizer(token_pattern=r'\\b\\w\\w+\\b', max_features=1000)\n",
        "X_vectorized = vectorizer.fit_transform(X_train_cleaned)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train_split, X_test_split, y_train_split, y_test_split = train_test_split(X_vectorized, y_train_labels, test_size=0.2, random_state=42)\n",
        "\n",
        "# Set up the Logistic Regression model with GridSearchCV\n",
        "param_grid = {'C': [0.001, 0.01, 0.1, 1, 10]}\n",
        "grid = GridSearchCV(LogisticRegression(max_iter=10000), param_grid, cv=5)\n",
        "grid.fit(X_train_split, y_train_split)\n",
        "\n",
        "# Print best score and parameters\n",
        "print(\"Best cross-validation score: {:.2f}\".format(grid.best_score_))\n",
        "\n",
        "# Classification report and ROC-AUC score\n",
        "print(classification_report(y_test, y_pred))\n",
        "label_encoder = LabelEncoder()\n",
        "y_test_encoded = label_encoder.fit_transform(y_test)\n",
        "y_pred_encoded = label_encoder.transform(y_pred)\n",
        "roc_auc = roc_auc_score(y_test_encoded, y_pred_encoded)\n",
        "print(\"ROC-AUC Score:\", roc_auc)\n",
        "print(\"Best Parameters:\", grid.best_params_)\n",
        "print(\"Best Score:\", grid.best_score_)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qKpgxUiOyG-7",
        "outputId": "c5392fb2-50c0-4175-9c28-d767ee973577"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best cross-validation score: 0.96\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "    clickbait       0.92      0.90      0.91      2386\n",
            "not clickbait       0.91      0.93      0.92      2610\n",
            "\n",
            "     accuracy                           0.92      4996\n",
            "    macro avg       0.92      0.92      0.92      4996\n",
            " weighted avg       0.92      0.92      0.92      4996\n",
            "\n",
            "ROC-AUC Score: 0.9166727686729422\n",
            "Best Parameters: {'C': 10}\n",
            "Best Score: 0.9559626176088523\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The reported results suggest an improved logistic regression model when using advanced word tokenization, as evidenced by the best cross-validation score. Let's analyze each component of the output:\n",
        "\n",
        "1. **Best cross-validation score: 0.96**\n",
        "   - This impressive score indicates that, on average, the model correctly predicts whether a headline is clickbait or not 96% of the time across the cross-validation folds. It's an improvement over the stop word removal model, which had a score of 0.92.\n",
        "\n",
        "2. **Best Parameters: {'C': 10}**\n",
        "   - A 'C' value of 10 means that the model is less regularized, allowing for a more complex model that captures more information about the data. This can be beneficial if the data has many features that contribute to the prediction and the model is not overfitting.\n",
        "\n",
        "3. **Classification Report**\n",
        "   - Despite the advanced tokenization, the precision, recall, and F1-scores are the same as those reported for the stop word removal model. This indicates that the model's ability to predict on the test set has not improved in spite of a better cross-validation score. It could mean the model is slightly overfitting to the training data but performs similarly on unseen data.\n",
        "   \n",
        "4. **Accuracy: 0.92**\n",
        "   - The accuracy remains unchanged from the stop word removal model, which might indicate that the model's improved ability to capture nuances in the training data through advanced tokenization doesn't translate to a better performance on the test set.\n",
        "\n",
        "5. **ROC-AUC Score: 0.9167**\n",
        "   - The ROC-AUC score is identical to the previous model, showing that the advanced tokenization has not improved the model's discrimination capacity between clickbait and non-clickbait headlines on the test set.\n",
        "\n",
        "6. **Best Score: 0.9559626176088523**\n",
        "   - This is likely the mean cross-validation score for the best model found during grid search, which is significantly higher than that of the stop word removal model. This suggests that advanced tokenization helps the model perform better during the training phase.\n",
        "\n",
        "In summary, the advanced word tokenization appears to improve the model's training performance, but this improvement does not seem to carry over to the test set, where the precision, recall, F1-score, and ROC-AUC score remain the same as with stop word removal. The unchanged accuracy and ROC-AUC score indicate that the increased complexity of the model with a 'C' value of 10 does not result in overfitting but also does not yield better predictions for unseen data. The high cross-validation score suggests that the model has learned the training data well, possibly capturing more subtleties in the text through advanced tokenization techniques."
      ],
      "metadata": {
        "id": "5_Kf5EqdJQAi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Extract coefficients and feature names for visualization\n",
        "coefs = log_reg_model.coef_[0]\n",
        "feature_names = vectorizer.get_feature_names_out()\n",
        "\n",
        "# Visualize the coefficients\n",
        "visualize_coefficients(coefs, feature_names, n_top_features=30)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "7EPsfZyt1S1Y",
        "outputId": "cc53af19-e072-4610-dfc1-4035d2326b8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Advanced Word Tokenization: This process involves breaking down the text into individual words or phrases. In the case of headlines, certain words or phrases may be more common in clickbait (e.g., \"You won't believe\" or \"This one weird trick\").\n",
        "\n",
        "Left Side Tokens (\"took,\" \"il,\" \"places\"): These might be examples of tokens extracted from a set of headlines. Their significance could be in their frequency, position, or contextual usage which differs in clickbait versus non-clickbait headlines.\n",
        "\n",
        "Right Side Tokens (\"ends,\" \"line,\" \"drugs\"): Similarly, these tokens could be indicative of certain types of headlines. For example, dramatic words like \"ends\" or \"drugs\" might appear more frequently in clickbait headlines.\n",
        "Graph Created from Results: The graph visualizes relationships or patterns that can be used to classify headlines. It could show the frequency of tokens, their co-occurrence, or other statistical features.\n",
        "\n",
        "Contextual Analysis: The graph might indicate how these words are used in different contexts—clickbait headlines might use sensational or emotional language, while non-clickbait headlines might use more straightforward language.\n",
        "The goal of this analysis is to identify patterns that can be used by a machine learning algorithm to predict whether a new headline is likely to be clickbait\n",
        "\n",
        "\n",
        " For example, if the word \"drugs\" is often found in clickbait headlines within the dataset, and a new headline contains this word, the model might predict this new headline to be clickbait as well.\n",
        "\n"
      ],
      "metadata": {
        "id": "K5H-pvigKmyb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Third model: Wordpiece tokenization\n"
      ],
      "metadata": {
        "id": "7KXdXy2K1WbK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import re\n",
        "\n",
        "\n",
        "# Function to clean the text data\n",
        "def clean_text(text):\n",
        "    text = re.sub(r'<.*?>', '', text)  # Remove any HTML tags\n",
        "    text = text.lower()  # Convert text to lowercase\n",
        "    text = re.sub(r'[^a-z]', ' ', text)  # Remove punctuations and numbers\n",
        "    text = re.sub(r'\\s+[a-zA-Z]\\s+', ' ', text)  # Remove single character terms\n",
        "    text = re.sub(r'\\s+', ' ', text, flags=re.I)  # Remove extra spaces\n",
        "    return text\n",
        "\n",
        "# Clean the text data in X_train\n",
        "X_train_cleaned = X_train.apply(clean_text)\n",
        "\n"
      ],
      "metadata": {
        "id": "X4wCDns_1cix"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import re\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import classification_report, roc_auc_score\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "\n",
        "\n",
        "# Clean the text data\n",
        "X_train_cleaned = X_train.apply(clean_text)\n",
        "\n",
        "# Vectorize the text data with an approximation of wordpiece tokenization\n",
        "vectorizer = TfidfVectorizer(token_pattern=r'\\b\\w{1,4}\\b', max_features=1000)  # Adjust token_pattern to simulate wordpiece tokenization\n",
        "X_vectorized = vectorizer.fit_transform(X_train_cleaned)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train_split, X_test_split, y_train_split, y_test_split = train_test_split(X_vectorized, y_train_labels, test_size=0.2, random_state=42)\n",
        "\n",
        "# Set up the Logistic Regression model with GridSearchCV\n",
        "param_grid = {'C': [0.001, 0.01, 0.1, 1, 10]}\n",
        "grid = GridSearchCV(LogisticRegression(max_iter=10000), param_grid, cv=5)\n",
        "grid.fit(X_train_split, y_train_split)\n",
        "\n",
        "# Print best score and parameters\n",
        "print(\"Best cross-validation score: {:.2f}\".format(grid.best_score_))\n",
        "print(\"Best parameters:\", grid.best_params_)\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "y_pred = grid.predict(X_test_split)\n",
        "\n",
        "# Classification report and ROC-AUC score\n",
        "print(classification_report(y_test_split, y_pred))\n",
        "label_encoder = LabelEncoder()\n",
        "y_test_encoded = label_encoder.fit_transform(y_test_split)\n",
        "y_pred_encoded = label_encoder.transform(y_pred)\n",
        "roc_auc = roc_auc_score(y_test_encoded, y_pred_encoded)\n",
        "print(\"ROC-AUC Score:\", roc_auc)\n",
        "print(\"Best Score:\", grid.best_score_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4aFvyv-618CA",
        "outputId": "ce3f1607-70f3-4fad-c5bd-fcdaf318d295"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best cross-validation score: 0.92\n",
            "Best parameters: {'C': 10}\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "    clickbait       0.92      0.90      0.91      2386\n",
            "not clickbait       0.91      0.93      0.92      2610\n",
            "\n",
            "     accuracy                           0.92      4996\n",
            "    macro avg       0.92      0.92      0.92      4996\n",
            " weighted avg       0.92      0.92      0.92      4996\n",
            "\n",
            "ROC-AUC Score: 0.9166727686729422\n",
            "Best Score: 0.919682003745051\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "- **Best Cross-Validation Score (0.92)**: This indicates the model's average accuracy across different subsets of the dataset during the cross-validation process. A score of 0.92 means the model correctly predicts whether a headline is clickbait or not 92% of the time on average.\n",
        "\n",
        "- **Best Parameters ({'C': 10})**: This refers to the hyperparameters of the model that yielded the best performance. Here, 'C' is likely a parameter for a regularization strength in models like Logistic Regression or Support Vector Machines, where a higher value of 'C' means less regularization.\n",
        "\n",
        "- **Precision**: This metric is the ratio of true positive predictions to the total predicted positives. For clickbait, a precision of 0.92 means that when the model predicts a headline as clickbait, it is correct 92% of the time.\n",
        "\n",
        "- **Recall**: This is the ratio of true positive predictions to the actual positives. For clickbait, a recall of 0.90 means that the model correctly identifies 90% of all actual clickbait headlines.\n",
        "\n",
        "- **F1-Score**: This is the harmonic mean of precision and recall, giving a balance between the two. It's particularly useful if the cost of false positives and false negatives is roughly equivalent. An F1-score around 0.91-0.92 shows a good balance between precision and recall.\n",
        "\n",
        "- **Support**: This is the number of actual occurrences in the dataset. There were 2386 clickbait and 2610 non-clickbait headlines that the model was tested against.\n",
        "\n",
        "- **Accuracy**: This is the ratio of correctly predicted instances to the total instances in the dataset. An accuracy of 0.92 suggests high overall correctness of the model.\n",
        "\n",
        "- **Macro Avg**: This is the average of the precision and recall scores without taking class imbalance into account. A macro average of 0.92 indicates the model performs well across both classes equally.\n",
        "\n",
        "- **Weighted Avg**: This average takes into account the imbalance between the classes by weighting the precision and recall of each class by its presence in the dataset. A weighted average of 0.92 indicates that the model is likely accounting well for any class imbalance.\n",
        "\n",
        "- **ROC-AUC Score (0.9166727686729422)**: This metric represents the area under the Receiver Operating Characteristic curve, which plots the true positive rate against the false positive rate at various threshold settings. An ROC-AUC score close to 1 indicates a very good model. A score of approximately 0.917 suggests the model has a high ability to differentiate between clickbait and non-clickbait headlines.\n",
        "\n",
        "- **Best Score (0.919682003745051)**: This could be the best score obtained during the hyperparameter tuning process, likely referring to the highest cross-validation accuracy the model achieved with the optimal parameters.\n",
        "\n",
        "Overall, the model exhibits strong performance in identifying clickbait headlines with high precision, recall, and accuracy, suggesting that it can reliably be used for this classification task. WordPiece tokenization, which is a method used for breaking text into tokens or pieces that can represent subword units, seems to have contributed effectively to the model's ability to understand and predict clickbait content."
      ],
      "metadata": {
        "id": "uGJUo2xALFYW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Extract coefficients and feature names for visualization\n",
        "coefs = log_reg_model.coef_[0]\n",
        "feature_names = vectorizer.get_feature_names_out()\n",
        "\n",
        "# Visualize the coefficients\n",
        "visualize_coefficients(coefs, feature_names, n_top_features=30)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "fEjwL_4o2Aa4",
        "outputId": "a23a4cfb-7f41-41bf-b5a8-08af8f3071cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "F1ACsuEV14oZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The best model appears to be the one using advanced word tokenization, with a best cross-validation score of 0.96. This score is higher than the other two models which both have a score of 0.92. Additionally, the best parameters for the advanced word tokenization model use a 'C' value of 10, which implies that this model may be better regularized or fit to the data compared to the stop word removal tokenization model, which also uses a 'C' value of 1 but has a lower cross-validation score.\n",
        "\n",
        "The higher cross-validation score indicates that the advanced word tokenization model is likely to generalize better to unseen data compared to the other two. Although the precision, recall, f1-score, and ROC-AUC scores are identical across all three models, cross-validation is a more robust measure as it averages the model's effectiveness over several splits of the data. Therefore, the advanced word tokenization model's higher cross-validation score suggests it is the strongest model of the three."
      ],
      "metadata": {
        "id": "qPxTNjPmNpa5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Part 2: Build a predictive neural network using Keras\n",
        "\n",
        "To complete part two of the homework do the following:\n",
        "\n",
        "Train test split the iris dataset and then run a multilayer perceptron (feed forward neural network) with two hidden layers on the iris dataset using the keras Sequential interface.\n",
        "\n",
        "Data can be imported via the following link:\n",
        "\n",
        "http://vincentarelbundock.github.io/Rdatasets/csv/datasets/iris.csv\n",
        "\n",
        "fit two models with different numbers of hidden layers and or hidden neurons and evaluate each on a test-set.  Describe the differences in the predictive accuracy of models with different numbers of hidden units/neurons.  Describe the predictive strength of your best model.  Be sure to explain your choice and evaluate this model using the test set.*texte en italique*"
      ],
      "metadata": {
        "id": "FhU1-pM2Nwxu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "iris_df = pd.read_csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/datasets/iris.csv\")"
      ],
      "metadata": {
        "id": "JZh6zTGsmD0c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "iris_df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "svSEWSnlmdMk",
        "outputId": "22385b01-a5cf-45de-c908-6253db30a065"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "rownames          int64\n",
              "Sepal.Length    float64\n",
              "Sepal.Width     float64\n",
              "Petal.Length    float64\n",
              "Petal.Width     float64\n",
              "Species          object\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "iris_df.mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t8YjCN0SmgW_",
        "outputId": "dc4470d8-67ef-46aa-fdd7-ddb9fad99bff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-3-d84e913cdd1d>:1: FutureWarning: The default value of numeric_only in DataFrame.mean is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  iris_df.mean()\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "rownames        75.500000\n",
              "Sepal.Length     5.843333\n",
              "Sepal.Width      3.057333\n",
              "Petal.Length     3.758000\n",
              "Petal.Width      1.199333\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "iris_df.var()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bCmq7qGmmr3I",
        "outputId": "a1679008-657f-4a72-f160-2a653554cd18"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-4-b8a21082699d>:1: FutureWarning: The default value of numeric_only in DataFrame.var is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  iris_df.var()\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "rownames        1887.500000\n",
              "Sepal.Length       0.685694\n",
              "Sepal.Width        0.189979\n",
              "Petal.Length       3.116278\n",
              "Petal.Width        0.581006\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%matplotlib inline\n",
        "from matplotlib import pyplot as plt\n",
        "import numpy as np\n",
        "import scipy as sp\n",
        "import pandas as pd\n",
        "import matplotlib as mpl\n",
        "import seaborn as sns\n",
        "import sklearn as skl\n",
        "\n",
        "# Univariate distribution of the target feature: testscr\n",
        "sns.histplot(iris_df['Species'], kde=True)\n",
        "plt.title('species')\n",
        "plt.show()\n",
        "\n",
        "variables =  ['Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width']\n",
        "\n",
        "for var in variables:\n",
        "    sns.histplot(iris_df[var], kde=True)\n",
        "    description = {\n",
        "        'Sepal.Length': 'Sepal Lenght',\n",
        "        'Sepal.Width': 'Sepal Width',\n",
        "        'Petal.Length': 'Petal Lenght ',\n",
        "        'Petal.Width':  'Petal Width'\n",
        "    }\n",
        "    plt.title(f'Distribution of {description[var]}')\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "2NJ2fdHMm446",
        "outputId": "0a0cc879-db28-4ffb-94ac-b076548c7115"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjoAAAHHCAYAAAC2rPKaAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABjD0lEQVR4nO3dd3gUdeLH8fduyqYXkpAeSuglNAUCSi+CIiieXcFTvEOwnz+PUw/LedhORcVyd554dkXFRhFp0quhE4pAAiEJIaT37Pz+QPaMECAhyWw2n9fz7PO4s7OzHyZr9pPZ73zHYhiGgYiIiIgLspodQERERKS+qOiIiIiIy1LREREREZeloiMiIiIuS0VHREREXJaKjoiIiLgsFR0RERFxWSo6IiIi4rJUdERERMRlqeiI1NLjjz+OxWJpkNcaNGgQgwYNctxftmwZFouFOXPmNMjrT5w4kZYtWzbIa9VWQUEBd9xxBxEREVgsFu677z6zI12Qhnp/1eR1LBYLjz/++HmvO3Xq1AtIJlI3VHREgNmzZ2OxWBw3Ly8voqKiGDlyJK+88gr5+fl18jppaWk8/vjjJCUl1cn26pIzZzsff//735k9ezaTJ0/mvffe45Zbbql23bKyMmbOnEmPHj0ICAggKCiIzp07c+edd7J79+4GTH1h7rrrLqxWK9nZ2VWWZ2dnY7VasdlslJSUVHns559/xmKx8Je//OWCX3/16tU8/vjj5OTkXPC2ROqLio7Irzz55JO89957vPHGG9x9990A3HfffXTt2pWtW7dWWffRRx+luLi4RttPS0vjiSeeqHGZ+P777/n+++9r9JyaOlu2f/3rXyQnJ9fr61+oJUuW0LdvX6ZPn87NN99Mr169ql13/PjxPPjgg3Tp0oVnnnmGJ554ggEDBjB//nzWrl3bgKkvzCWXXIJhGKxatarK8tWrV2O1WikvL2fjxo1VHju17iWXXALU7n3869d54oknVHTEqbmbHUDEmYwaNYqLLrrIcX/atGksWbKEK664giuvvJJdu3bh7e0NgLu7O+7u9fu/UFFRET4+Pnh6etbr65yLh4eHqa9/PjIzM+nUqdM519uwYQPffvstTz/99GlHNV577bVG9aF9qqysXLmSMWPGOJavWrWKhIQEiouLWblypWO9U+tarVb69esHNMz7WMRMOqIjcg5Dhgzhscce49ChQ7z//vuO5Wca27Bo0SIuueQSgoKC8PPzo3379o4P02XLlnHxxRcDcNtttzm+Jps9ezZwchxOly5d2LRpEwMGDMDHx8fx3N+O0TmlsrKSv/zlL0RERODr68uVV15JampqlXVatmzJxIkTT3vur7d5rmxnGqNTWFjIgw8+SGxsLDabjfbt2/PCCy9gGEaV9U6N1Zg7dy5dunTBZrPRuXNnFixYcOYd/huZmZncfvvthIeH4+XlRbdu3Xj33Xcdj58ar3TgwAG+++47R/aDBw+ecXv79+8HoH///qc95ubmRkhISJVlR44c4fe//z3h4eGO7P/5z3+qrHMqwyeffHLOn8eKFSv43e9+R1xcHDabjdjYWO6///5aHVWJi4sjNjb2tCM6q1aton///vTr1++Mj3Xu3JmgoCDgzO/j0tJS7r//fsLCwvD39+fKK6/k8OHDVdZ5/PHHeeihhwBo1apVtfu9tj93kbqiGi9yHm655Rb+8pe/8P333zNp0qQzrrNjxw6uuOIKEhISePLJJ7HZbOzbt8/xQdOxY0eefPJJ/vrXv3LnnXdy6aWXAjj+sgY4fvw4o0aN4vrrr+fmm28mPDz8rLmefvppLBYLDz/8MJmZmbz88ssMGzaMpKQkx5Gn83E+2X7NMAyuvPJKli5dyu2330737t1ZuHAhDz30EEeOHOGll16qsv7KlSv54osvuOuuu/D39+eVV15h/PjxpKSknFYsfq24uJhBgwaxb98+pk6dSqtWrfjss8+YOHEiOTk53HvvvXTs2JH33nuP+++/n5iYGB588EEAwsLCzrjNFi1aAPDBBx/Qv3//sx7NyMjIoG/fvo6yFhYWxvz587n99tvJy8s7bcDz+fw8PvvsM4qKipg8eTIhISGsX7+eV199lcOHD/PZZ59Vm6U6l1xyCV988QWlpaXYbDbKysrYsGEDkydPpqioiP/7v//DMAwsFgsnTpxg586d/PGPfzzrNu+44w7ef/99brzxRvr168eSJUu4/PLLq6xz9dVXs2fPHj766CNeeuklQkNDgar7vbY/d5E6ZYiI8c477xiAsWHDhmrXCQwMNHr06OG4P336dOPX/wu99NJLBmAcO3as2m1s2LDBAIx33nnntMcGDhxoAMabb755xscGDhzouL906VIDMKKjo428vDzH8k8//dQAjJkzZzqWtWjRwpgw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zc2lX79+LF68mH379p227qnZpx955BGuv/56PDw8GDNmjKMAiTgFk872EnEqp04vP3Xz9PQ0IiIijOHDhxszZ86scsrwKb89LXfx4sXG2LFjjaioKMPT09OIiooybrjhBmPPnj1VnvfVV18ZnTp1Mtzd3auczj1w4ECjc+fOZ8xX3enlH330kTFt2jSjefPmhre3t3H55Zef8TTpf/zjH0Z0dLRhs9mM/v37Gxs3bjxtm2fL9tvTyw3DMPLz843777/fiIqKMjw8PIy2bdsazz//vGG326usBxhTpkw5LVN1p73/VkZGhnHbbbcZoaGhhqenp9G1a9czngJ/vqeXZ2RkGM8884wxcOBAIzIy0nB3dzeCg4ONIUOGGHPmzDnj+lOmTDFiY2MNDw8PIyIiwhg6dKjxz3/+07FOTX4eO3fuNIYNG2b4+fkZoaGhxqRJkxynXf/633W+p5efkpiYaADGX/7yl9Meu+eeewzAGDVq1GmPnel1iouLjXvuuccICQkxfH19jTFjxhipqamnnV5uGIbx1FNPGdHR0YbVaq1yqvmF/txF6orFMDQqTETkQixbtozBgwfz2Wefcc0115gdR0R+RWN0RERExGWp6IiIiIjLUtERERERl6UxOiIiIuKydERHREREXJaKjoiIiLgsl58w0G63k5aWhr+/v6YrFxERaSQMwyA/P5+oqKjTLuxbEy5fdNLS0oiNjTU7hoiIiNRCamoqMTExtX6+yxedU1PEp6amEhAQYHIaEREROR95eXnExsbW6lIvv+byRefU11UBAQEqOiIiIo3MhQ470WBkERERcVkqOiIiIuKyVHRERETEZanoiIiIiMtS0RERERGXpaIjIiIiLktFR0RERFyWio6IiIi4LBUdERERcVkqOiIiIuKyVHRERETEZanoiIiIiMtS0RERERGXpaIjIiIiLsvd7AAi0rBSUlLIysoyOwYAoaGhxMXFmR1DRFyYio5IE5KSkkKHjh0pLioyOwoA3j4+7N61S2VHROqNio5IE5KVlUVxURE3Pfw84XHxpmbJSNnPB88+RFZWloqOiNQbFR2RJig8Lp6Ytp3NjiEiUu80GFlERERcloqOiIiIuCwVHREREXFZKjoiIiLislR0RERExGWp6IiIiIjLUtERERERl6WiIyIiIi5LRUdERERcloqOiIiIuCwVHREREXFZphadN954g4SEBAICAggICCAxMZH58+c7Hh80aBAWi6XK7Y9//KOJiUVERKQxMfWinjExMTzzzDO0bdsWwzB49913GTt2LD/99BOdO5+84OCkSZN48sknHc/x8fExK66IiIg0MqYWnTFjxlS5//TTT/PGG2+wdu1aR9Hx8fEhIiLCjHgiIiLSyDnNGJ3Kyko+/vhjCgsLSUxMdCz/4IMPCA0NpUuXLkybNo2ioiITU4qIiEhjYuoRHYBt27aRmJhISUkJfn5+fPnll3Tq1AmAG2+8kRYtWhAVFcXWrVt5+OGHSU5O5osvvqh2e6WlpZSWljru5+Xl1fu/QURERJyT6UWnffv2JCUlkZuby5w5c5gwYQLLly+nU6dO3HnnnY71unbtSmRkJEOHDmX//v3Ex8efcXszZszgiSeeaKj4IiIi4sRM/+rK09OTNm3a0KtXL2bMmEG3bt2YOXPmGdft06cPAPv27at2e9OmTSM3N9dxS01NrZfcIiIi4vxMP6LzW3a7vcpXT7+WlJQEQGRkZLXPt9ls2Gy2+ogmIiIijYypRWfatGmMGjWKuLg48vPz+fDDD1m2bBkLFy5k//79fPjhh4wePZqQkBC2bt3K/fffz4ABA0hISDAztoiIiDQSphadzMxMbr31Vo4ePUpgYCAJCQksXLiQ4cOHk5qayg8//MDLL79MYWEhsbGxjB8/nkcffdTMyCIiItKImFp03n777Wofi42NZfny5Q2YRkRERFyN6YORRUREROqLio6IiIi4LBUdERERcVkqOiIiIuKyVHRERETEZanoiIiIiMtS0RERERGXpaIjIiIiLktFR0RERFyWio6IiIi4LBUdERERcVkqOiIiIuKyVHRERETEZanoiIiIiMtS0RERERGXpaIjIiIiLktFR0RERFyWio6IiIi4LBUdERERcVkqOiIiIuKyVHRERETEZanoiIiIiMtS0RERERGXpaIjIiIiLktFR0RERFyWio6IiIi4LBUdERERcVkqOiIiIuKyVHRERETEZanoiIiIiMtS0RERERGXpaIjIiIiLktFR0RERFyWio6IiIi4LBUdERERcVkqOiIiIuKyVHRERETEZZladN544w0SEhIICAggICCAxMRE5s+f73i8pKSEKVOmEBISgp+fH+PHjycjI8PExCIiItKYmFp0YmJieOaZZ9i0aRMbN25k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wgvGrl27jOnTpxseHh7Gtm3bzPgnNDq12edPPPGEsXDhQmP//v3Gpk2bjOuvv97w8vIyduzYYcY/oVH685//bCxfvtw4cOCAsXXrVuPPf/6zYbFYjO+//94wDL3P60tN97ve6/Xnt2f/6D3fMM613+vqPa+vrqrxxhtvADBo0KAqy9955x0mTpwIQEpKClbr/w6K9evXjw8//JBHH32Uv/zlL7Rt25a5c+eedTCt/E9t9vmJEyeYNGkS6enpBAcH06tXL1avXq2xJTWQmZnJrbfeytGjRwkMDCQhIYGFCxcyfPhwQO/z+lLT/a73esPRe94c9fWetxiGYdR1WBERERFnoDE6IiIi4rJUdERERMRlqeiIiIiIy1LREREREZeloiMiIiIuS0VHREREXJaKjoiIiLgsFR0RaRQsFgtz586t020uW7YMi8VCTk5OtevMnj2boKCgc26rPvKJyIVT0RGRszp27BiTJ08mLi4Om81GREQEI0eOZNWqVWZHc3jzzTfx9/enoqLCsaygoAAPD4/TZto+VW72799Pv379HDMTn6/HH3+c7t2711FyEalvugSEiJzV+PHjKSsr491336V169ZkZGSwePFijh8/bnY0h8GDB1NQUMDGjRvp27cvACtWrCAiIoJ169ZRUlKCl5cXAEuXLiUuLo74+HgAXYFaxMXpiI6IVCsnJ4cVK1bw7LPPMnjwYFq0aEHv3r2ZNm0aV155pWOdO+64g7CwMAICAhgyZAhbtmxxbOPUEZC33nqL2NhYfHx8uPbaa8nNzXWss2HDBoYPH05oaCiBgYEMHDiQzZs3n3fO9u3bExkZybJlyxzLli1bxtixY2nVqhVr166tsnzw4MGO//7tV1ezZ88mLi4OHx8frrrqqiqFbvbs2TzxxBNs2bIFi8WCxWJh9uzZjsezsrK46qqr8PHxoW3btnz99dfn/W8QkfqhoiMi1fLz88PPz4+5c+dSWlp6xnV+97vfkZmZyfz589m0aRM9e/Zk6NChZGdnO9bZt28fn376Kd988w0LFizgp59+4q677nI8np+fz4QJE1i5ciVr166lbdu2jB49mvz8/PPOOnjwYJYuXeq4v3TpUgYNGsTAgQMdy4uLi1m3bp2j6PzWunXruP3225k6dSpJSUkMHjyYv/3tb47Hr7vuOh588EE6d+7M0aNHOXr0KNddd53j8SeeeIJrr72WrVu3Mnr0aG666aYq+0FETFA3F1sXEVc1Z84cIzg42PDy8jL69etnTJs2zdiyZYthGIaxYsUKIyAgwCgpKanynPj4eOOtt94yDMMwpk+fbri5uRmHDx92PD5//nzDarUaR48ePeNrVlZWGv7+/sY333zjWAYYX375ZbU5//Wvfxm+vr5GeXm5kZeXZ7i7uxuZmZnGhx9+aAwYMMAwDMNYvHixARiHDh0yDMMwli5dagDGiRMnDMMwjBtuuMEYPXp0le1ed911RmBgoOP+9OnTjW7dup32+oDx6KOPOu4XFBQYgDF//vxqM4tI/dMRHRE5q/Hjx5OWlsbXX3/NZZddxrJly+jZsyezZ89my5YtFBQUEBIS4jj64+fnx4EDB9i/f79jG3FxcURHRzvuJyYmYrfbSU5OBiAjI4NJkybRtm1bAgMDCQgIoKCggJSUlPPOOWjQIAoLC9mwYQMrVqygXbt2hIWFMXDgQMc4nWXLltG6dWvi4uLOuI1du3bRp0+fKssSExPPO0NCQoLjv319fQkICCAzM/O8ny8idU+DkUXknLy8vBg+fDjDhw/nscce44477mD69Oncddddp42NOeV8Tsk+ZcKECRw/fpyZM2fSokULbDYbiYmJlJWVnfc22rRpQ0xMDEuXLuXEiRMMHDgQgKioKGJjY1m9ejVLly5lyJAh573NmvLw8Khy32KxYLfb6+31ROTcVHREpMY6derE3Llz6dmzJ+np6bi7u9OyZctq109JSSEtLY2oqCgA1q5di9VqpX379gCsWrWK119/ndGjRwOQmppKVlZWjXMNHjyYZcuWceLECR566CHH8gEDBjB//nzWr1/P5MmTq31+x44dWbduXZVlvx7IDODp6UllZWWNs4mIOfTVlYhU6/jx4wwZMoT333+frVu3cuDAAT777DOee+45xo4dy7Bhw0hMTGTcuHF8//33HDx4kNWrV/PII4+wceNGx3a8vLyYMGECW7ZsYcWKFdxzzz1ce+21jlO727Zty3vvvceuXbtYt24dN910E97e3mfNNnToUF577bUqywYPHszKlStJSkpyHNEBGDhwIG+99RZlZWXVDkQGuOeee1iwYAEvvPACe/fu5bXXXmPBggVV1mnZsiUHDhwgKSmJrKysagdpi4hzUNERkWr5+fnRp08fXnrpJQYMGECXLl147LHHmDRpEq+99hoWi4V58+YxYMAAbrvtNtq1a8f111/PoUOHCA8Pd2ynTZs2XH311YwePZoRI0aQkJDA66+/7nj87bff5sSJE/Ts2ZNbbrmFe+65h+bNm5812/79+0876jN48GCKi4tp06ZNldcfOHAg+fn5jtPQq9O3b1/+9a9/MXPmTLp168b333/Po48+WmWd8ePHc9lllzF48GDCwsL46KOPzmtfiog5LIZhGGaHEBHX9fjjjzN37lySkpLMjiIiTZCO6IiIiIjLUtERERERl6WvrkRERMRl6YiOiIiIuCwVHREREXFZKjoiIiLislR0RERExGWp6IiIiIjLUtERERERl6WiIyIiIi5LRUdERERcloqOiIiIuKz/B6q1e6xmquPhAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "import pandas as pd\n",
        "\n",
        "#update data to set up for train test split\n",
        "iris_df = iris_df.iloc[:,1:]\n",
        "y = iris_df['Species']\n",
        "X = iris_df.loc[:,iris_df.columns != 'Species']\n",
        "\n",
        "display(pd.get_dummies(y))\n",
        "display(iris_df.head())\n",
        "display(X.head())\n",
        "display(y[0::10])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "vkT-5-xKnujw",
        "outputId": "a95e13f5-6f59-42eb-cf3a-7522923a4ecd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     setosa  versicolor  virginica\n",
              "0         1           0          0\n",
              "1         1           0          0\n",
              "2         1           0          0\n",
              "3         1           0          0\n",
              "4         1           0          0\n",
              "..      ...         ...        ...\n",
              "145       0           0          1\n",
              "146       0           0          1\n",
              "147       0           0          1\n",
              "148       0           0          1\n",
              "149       0           0          1\n",
              "\n",
              "[150 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cf96bd6d-472c-4c84-9cc3-4b3087fa51b9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>setosa</th>\n",
              "      <th>versicolor</th>\n",
              "      <th>virginica</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>148</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>150 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cf96bd6d-472c-4c84-9cc3-4b3087fa51b9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cf96bd6d-472c-4c84-9cc3-4b3087fa51b9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cf96bd6d-472c-4c84-9cc3-4b3087fa51b9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c838c50b-b00d-48a1-a1e4-7c6b284a44ba\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c838c50b-b00d-48a1-a1e4-7c6b284a44ba')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c838c50b-b00d-48a1-a1e4-7c6b284a44ba button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Sepal.Length  Sepal.Width  Petal.Length  Petal.Width Species\n",
              "0           5.1          3.5           1.4          0.2  setosa\n",
              "1           4.9          3.0           1.4          0.2  setosa\n",
              "2           4.7          3.2           1.3          0.2  setosa\n",
              "3           4.6          3.1           1.5          0.2  setosa\n",
              "4           5.0          3.6           1.4          0.2  setosa"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b6dabfa6-6181-4cec-b14f-8527a4c91b2d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sepal.Length</th>\n",
              "      <th>Sepal.Width</th>\n",
              "      <th>Petal.Length</th>\n",
              "      <th>Petal.Width</th>\n",
              "      <th>Species</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>setosa</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b6dabfa6-6181-4cec-b14f-8527a4c91b2d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b6dabfa6-6181-4cec-b14f-8527a4c91b2d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b6dabfa6-6181-4cec-b14f-8527a4c91b2d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-13f6b0a1-ddc6-47c5-a751-193bff46020b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-13f6b0a1-ddc6-47c5-a751-193bff46020b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-13f6b0a1-ddc6-47c5-a751-193bff46020b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Sepal.Length  Sepal.Width  Petal.Length  Petal.Width\n",
              "0           5.1          3.5           1.4          0.2\n",
              "1           4.9          3.0           1.4          0.2\n",
              "2           4.7          3.2           1.3          0.2\n",
              "3           4.6          3.1           1.5          0.2\n",
              "4           5.0          3.6           1.4          0.2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e0312c4f-5bbf-4ab1-986b-d522016da633\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sepal.Length</th>\n",
              "      <th>Sepal.Width</th>\n",
              "      <th>Petal.Length</th>\n",
              "      <th>Petal.Width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e0312c4f-5bbf-4ab1-986b-d522016da633')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e0312c4f-5bbf-4ab1-986b-d522016da633 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e0312c4f-5bbf-4ab1-986b-d522016da633');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8bdaa09f-9b6f-4a36-bf1d-7dfeaa35d8ba\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8bdaa09f-9b6f-4a36-bf1d-7dfeaa35d8ba')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8bdaa09f-9b6f-4a36-bf1d-7dfeaa35d8ba button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "0          setosa\n",
              "10         setosa\n",
              "20         setosa\n",
              "30         setosa\n",
              "40         setosa\n",
              "50     versicolor\n",
              "60     versicolor\n",
              "70     versicolor\n",
              "80     versicolor\n",
              "90     versicolor\n",
              "100     virginica\n",
              "110     virginica\n",
              "120     virginica\n",
              "130     virginica\n",
              "140     virginica\n",
              "Name: Species, dtype: object"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "! pip install aimodelshare\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iJD7dPlhvk1M",
        "outputId": "485f021f-db2e-4756-e353-db247a2e9360"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting aimodelshare\n",
            "  Downloading aimodelshare-0.1.5-py3-none-any.whl (975 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m975.8/975.8 kB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting boto3==1.26.69 (from aimodelshare)\n",
            "  Downloading boto3-1.26.69-py3-none-any.whl (132 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m132.7/132.7 kB\u001b[0m \u001b[31m13.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting botocore==1.29.82 (from aimodelshare)\n",
            "  Downloading botocore-1.29.82-py3-none-any.whl (10.5 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.5/10.5 MB\u001b[0m \u001b[31m18.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: scikit-learn==1.2.2 in /usr/local/lib/python3.10/dist-packages (from aimodelshare) (1.2.2)\n",
            "Collecting onnx==1.13.1 (from aimodelshare)\n",
            "  Downloading onnx-1.13.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.5 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.5/13.5 MB\u001b[0m \u001b[31m16.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting onnxconverter-common>=1.7.0 (from aimodelshare)\n",
            "  Downloading onnxconverter_common-1.14.0-py2.py3-none-any.whl (84 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.5/84.5 kB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: regex in /usr/local/lib/python3.10/dist-packages (from aimodelshare) (2023.6.3)\n",
            "Collecting keras2onnx>=1.7.0 (from aimodelshare)\n",
            "  Downloading keras2onnx-1.7.0-py3-none-any.whl (96 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m96.3/96.3 kB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: tensorflow>=2.12 in /usr/local/lib/python3.10/dist-packages (from aimodelshare) (2.14.0)\n",
            "Collecting tf2onnx (from aimodelshare)\n",
            "  Downloading tf2onnx-1.15.1-py3-none-any.whl (454 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m454.7/454.7 kB\u001b[0m \u001b[31m32.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting skl2onnx>=1.14.0 (from aimodelshare)\n",
            "  Downloading skl2onnx-1.15.0-py2.py3-none-any.whl (294 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m294.7/294.7 kB\u001b[0m \u001b[31m9.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting onnxruntime>=1.7.0 (from aimodelshare)\n",
            "  Downloading onnxruntime-1.16.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (6.4 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.4/6.4 MB\u001b[0m \u001b[31m22.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: torch>=1.8.1 in /usr/local/lib/python3.10/dist-packages (from aimodelshare) (2.1.0+cu118)\n",
            "Collecting pydot==1.3.0 (from aimodelshare)\n",
            "  Downloading pydot-1.3.0-py2.py3-none-any.whl (18 kB)\n",
            "Collecting importlib-resources==5.10.0 (from aimodelshare)\n",
            "  Downloading importlib_resources-5.10.0-py3-none-any.whl (34 kB)\n",
            "Collecting onnxmltools>=1.6.1 (from aimodelshare)\n",
            "  Downloading onnxmltools-1.11.2-py2.py3-none-any.whl (322 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m322.5/322.5 kB\u001b[0m \u001b[31m25.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting Pympler==0.9 (from aimodelshare)\n",
            "  Downloading Pympler-0.9.tar.gz (178 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m178.4/178.4 kB\u001b[0m \u001b[31m18.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting docker==5.0.0 (from aimodelshare)\n",
            "  Downloading docker-5.0.0-py2.py3-none-any.whl (146 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m147.0/147.0 kB\u001b[0m \u001b[31m9.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting wget==3.2 (from aimodelshare)\n",
            "  Downloading wget-3.2.zip (10 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting PyJWT>=2.4.0 (from aimodelshare)\n",
            "  Downloading PyJWT-2.8.0-py3-none-any.whl (22 kB)\n",
            "Requirement already satisfied: seaborn>=0.11.2 in /usr/local/lib/python3.10/dist-packages (from aimodelshare) (0.12.2)\n",
            "Requirement already satisfied: astunparse==1.6.3 in /usr/local/lib/python3.10/dist-packages (from aimodelshare) (1.6.3)\n",
            "Collecting shortuuid>=1.0.8 (from aimodelshare)\n",
            "  Downloading shortuuid-1.0.11-py3-none-any.whl (10 kB)\n",
            "Requirement already satisfied: psutil>=5.9.1 in /usr/local/lib/python3.10/dist-packages (from aimodelshare) (5.9.5)\n",
            "Requirement already satisfied: pathlib>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from aimodelshare) (1.0.1)\n",
            "Requirement already satisfied: protobuf>=3.20.1 in /usr/local/lib/python3.10/dist-packages (from aimodelshare) (3.20.3)\n",
            "Collecting dill (from aimodelshare)\n",
            "  Downloading dill-0.3.7-py3-none-any.whl (115 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m115.3/115.3 kB\u001b[0m \u001b[31m9.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse==1.6.3->aimodelshare) (0.42.0)\n",
            "Requirement already satisfied: six<2.0,>=1.6.1 in /usr/local/lib/python3.10/dist-packages (from astunparse==1.6.3->aimodelshare) (1.16.0)\n",
            "Collecting jmespath<2.0.0,>=0.7.1 (from boto3==1.26.69->aimodelshare)\n",
            "  Downloading jmespath-1.0.1-py3-none-any.whl (20 kB)\n",
            "Collecting s3transfer<0.7.0,>=0.6.0 (from boto3==1.26.69->aimodelshare)\n",
            "  Downloading s3transfer-0.6.2-py3-none-any.whl (79 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.8/79.8 kB\u001b[0m \u001b[31m9.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/local/lib/python3.10/dist-packages (from botocore==1.29.82->aimodelshare) (2.8.2)\n",
            "Collecting urllib3<1.27,>=1.25.4 (from botocore==1.29.82->aimodelshare)\n",
            "  Downloading urllib3-1.26.18-py2.py3-none-any.whl (143 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m143.8/143.8 kB\u001b[0m \u001b[31m14.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: websocket-client>=0.32.0 in /usr/local/lib/python3.10/dist-packages (from docker==5.0.0->aimodelshare) (1.6.4)\n",
            "Requirement already satisfied: requests!=2.18.0,>=2.14.2 in /usr/local/lib/python3.10/dist-packages (from docker==5.0.0->aimodelshare) (2.31.0)\n",
            "Requirement already satisfied: numpy>=1.16.6 in /usr/local/lib/python3.10/dist-packages (from onnx==1.13.1->aimodelshare) (1.23.5)\n",
            "Requirement already satisfied: typing-extensions>=3.6.2.1 in /usr/local/lib/python3.10/dist-packages (from onnx==1.13.1->aimodelshare) (4.5.0)\n",
            "Requirement already satisfied: pyparsing>=2.1.4 in /usr/local/lib/python3.10/dist-packages (from pydot==1.3.0->aimodelshare) (3.1.1)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.2.2->aimodelshare) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.2.2->aimodelshare) (1.3.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.2.2->aimodelshare) (3.2.0)\n",
            "Collecting fire (from keras2onnx>=1.7.0->aimodelshare)\n",
            "  Downloading fire-0.5.0.tar.gz (88 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m88.3/88.3 kB\u001b[0m \u001b[31m8.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from onnxconverter-common>=1.7.0->aimodelshare) (23.2)\n",
            "Collecting protobuf>=3.20.1 (from aimodelshare)\n",
            "  Downloading protobuf-3.20.2-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m45.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting coloredlogs (from onnxruntime>=1.7.0->aimodelshare)\n",
            "  Downloading coloredlogs-15.0.1-py2.py3-none-any.whl (46 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.0/46.0 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: flatbuffers in /usr/local/lib/python3.10/dist-packages (from onnxruntime>=1.7.0->aimodelshare) (23.5.26)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from onnxruntime>=1.7.0->aimodelshare) (1.12)\n",
            "Requirement already satisfied: pandas>=0.25 in /usr/local/lib/python3.10/dist-packages (from seaborn>=0.11.2->aimodelshare) (1.5.3)\n",
            "Requirement already satisfied: matplotlib!=3.6.1,>=3.1 in /usr/local/lib/python3.10/dist-packages (from seaborn>=0.11.2->aimodelshare) (3.7.1)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.12->aimodelshare) (1.4.0)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.12->aimodelshare) (0.5.4)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.12->aimodelshare) (0.2.0)\n",
            "Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.12->aimodelshare) (3.9.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.12->aimodelshare) (16.0.6)\n",
            "Requirement already satisfied: ml-dtypes==0.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.12->aimodelshare) (0.2.0)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow>=2.12->aimodelshare) (3.3.0)\n",
            "INFO: pip is looking at multiple versions of tensorflow to determine which version is compatible with other requirements. This could take a while.\n",
            "Collecting tensorflow>=2.12 (from aimodelshare)\n",
            "  Downloading tensorflow-2.15.0.post1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (475.2 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m475.2/475.2 MB\u001b[0m \u001b[31m3.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Downloading tensorflow-2.15.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (475.2 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m475.2/475.2 MB\u001b[0m \u001b[31m1.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Downloading tensorflow-2.14.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (489.9 MB)\n",
            "\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━\u001b[0m \u001b[32m414.4/489.9 MB\u001b[0m \u001b[31m104.6 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\n",
            "\u001b[?25h\u001b[31mERROR: Operation cancelled by user\u001b[0m\u001b[31m\n",
            "\u001b[0m"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "import pandas as pd\n",
        "\n",
        "# Example data similar to the user's description\n",
        "data = {\n",
        "    'rownames': range(1, 151),\n",
        "    'Sepal.Length': np.random.rand(150),\n",
        "    'Sepal.Width': np.random.rand(150),\n",
        "    'Petal.Length': np.random.rand(150),\n",
        "    'Petal.Width': np.random.rand(150),\n",
        "    'Species': np.random.choice(['Setosa', 'Versicolor', 'Virginica'], 150)\n",
        "}\n",
        "\n",
        "iris_df = pd.DataFrame(data)\n",
        "\n",
        "# Splitting the dataset into train and test sets\n",
        "train, test = train_test_split(iris_df, test_size=0.25, random_state=42)\n",
        "\n",
        "train.shape, test.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GKzJRXrov2W-",
        "outputId": "8ecc5eaa-9afa-4364-eded-97121036da72"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((112, 6), (38, 6))"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "\n",
        "# Preprocessing\n",
        "encoder = LabelEncoder()\n",
        "scaler = StandardScaler()\n",
        "\n",
        "X_train = scaler.fit_transform(iris_df.iloc[:, 1:5])\n",
        "y_train = encoder.fit_transform(iris_df['Species'])\n",
        "y_train = to_categorical(y_train)\n",
        "\n",
        "X_test = scaler.transform(iris_df.iloc[:, 1:5])\n",
        "y_test = encoder.transform(iris_df['Species'])\n",
        "y_test = to_categorical(y_test)"
      ],
      "metadata": {
        "id": "nNtv9mh2zmQx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Before futher procedding, let's think about the parameters:\n",
        "\n",
        "1) The input layer should have as many nodes as there are features in the dataset. In the case of the Iris dataset, there are 4 features (Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), so the input layer should have 4 nodes.\n",
        "Let's begin by having 8 nodes in the first hidden layer, that is the double. Putting a higher number could result to an overfit so 8 is good. Given the data might not necesseraly be normally distributed, the model will consider ReLu in recognizing non-linear patterns in the dataset. Same for the second layer.\n",
        "\n",
        "2) he output layer should have as many nodes as there are classes to predict. The Iris dataset has 3 species, so use 3 nodes. Softmax is appropriate for multi-class classification as it will output probabilities for each class."
      ],
      "metadata": {
        "id": "fd2NZiK319Ku"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.optimizers import SGD\n",
        "\n",
        "model = Sequential()\n",
        "model.add(Dense(50, activation='relu', input_dim=4))  # First hidden layer, adjust input_dim accordingly to number of dimensions\n",
        "model.add(Dense(100, activation='relu'))  # Second hidden layer\n",
        "model.add(Dense(150, activation='relu'))  # Third hidden layer\n",
        "model.add(Dense(5, activation='softmax'))  # Output layer for 5-class classification\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer=SGD(), loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "model.summary()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jj2XlzK7yGwu",
        "outputId": "877488a2-4873-418b-df26-74f342cc6865"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_8 (Dense)             (None, 50)                250       \n",
            "                                                                 \n",
            " dense_9 (Dense)             (None, 100)               5100      \n",
            "                                                                 \n",
            " dense_10 (Dense)            (None, 150)               15150     \n",
            "                                                                 \n",
            " dense_11 (Dense)            (None, 5)                 755       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 21255 (83.03 KB)\n",
            "Trainable params: 21255 (83.03 KB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "2. **Layer Types and Configurations**:\n",
        "   - `dense_3 (Dense)`: This is the input layer with 8 neurons, using the `ReLU` activation function. The output shape is `(None, 8)`, where `None` represents the batch size, and `8` is the number of neurons. It has 40 parameters (weights), calculated as 4 inputs * 8 neurons + 8 biases (one for each neuron).\n",
        "   - `dense_4 (Dense)`: This is the first hidden layer, also with 8 neurons and `ReLU` activation. It has 72 parameters, calculated from the previous layer's 8 outputs * 8 neurons + 8 biases.\n",
        "   - `dense_5 (Dense)`: This is the output layer with 3 neurons (one for each class in the Iris dataset) using the `Softmax` activation function. It has 27 parameters, derived from 8 outputs from the previous layer * 3 neurons + 3 biases.\n",
        "\n",
        "3. **Total Parameters**:\n",
        "   - The total number of parameters in the model is 139. These parameters are what the model will learn during the training process. The total size of the model is given as 556 bytes, which is relatively small and efficient for a dataset like Iris.\n",
        "\n",
        "4. **Trainable Parameters**:\n",
        "   - All 139 parameters are trainable, meaning they will be updated during model training to minimize the loss function.\n",
        "\n",
        "5. **Non-trainable Parameters**:\n",
        "   - There are 0 non-trainable parameters, indicating that all parameters in this model are subject to updating during training.\n",
        "\n",
        "This summary gives a clear overview of your model's architecture, showing that it's a simple yet potentially effective neural network for a dataset like Iris. It's always good practice to review the model summary to understand the complexity and capacity of your neural network. Let's proceed to save it using modelling compilation => Loss Function: categorical_crossentropy is suitable for multi-class classification problems and adam is a good general-purpose optimizer."
      ],
      "metadata": {
        "id": "rlaHegQG28CC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss='categorical_crossentropy',\n",
        "              optimizer='adam',  # Using Adam optimizer\n",
        "              metrics=['accuracy'])\n"
      ],
      "metadata": {
        "id": "dLIRwYhv3Yfi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The optimizer is changed from 'sgd' (Stochastic Gradient Descent) to 'adam'. Adam is an optimization algorithm that can handle sparse gradients on noisy problems, and it's often more efficient than SGD.\n",
        "metrics is set to ['accuracy'] to evaluate the performance of the model during training and testing."
      ],
      "metadata": {
        "id": "QIIprOEd3i0Q"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now let's fit two models with different numbers of hidden layers and or hidden neurons and evaluate each on a test-set:\n",
        "\n",
        "1) The first model will have one hidden layer with fewer neurons to increase the machine ability to learn on the training set. It's unlikely to overfit but is prone to underfitting\n",
        "\n",
        "2) The second model is the opposite; more hidden layers and neurons but at the risk of overfit.\n",
        "\n",
        "3) Let's choose 60 epochs as more can lead to overfit, increasing too much the accuracy for a simple dataset like iris. A smaller batch size provides a regularizing effect and lower generalization error. A batch size of 32 is a good compromise between the efficiency of computation and the benefits of stochastic gradient descent. Like the number of epochs, the ideal batch size is often found through experimentation.\n",
        "\n",
        "4) We keep softmax as we deal with multi-class classification problem given that the dataset is composed of three flowers, each with mutually exclusive features given by their lenght and width. In the case of the Iris dataset, which involves classifying each instance into one of three species, softmax is appropriate. It will output three probabilities, one for each class, with each probability being between 0 and 1, and the sum of all probabilities being 1.The class with the highest probability is typically taken as the model’s output prediction.\n",
        "\n",
        "How to asses the best model ?\n",
        "\n",
        "Overfitting/Underfitting: If a model has much higher accuracy on the training set than on the test set, it might be overfitting. Conversely, consistently low accuracy might indicate underfitting.\n",
        "\n",
        "Best Model: The model with higher accuracy on the test set while maintaining a reasonable gap between training and testing performance is considered better."
      ],
      "metadata": {
        "id": "cv6lQdkx3nR5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "# Model 1: Fewer hidden layers/neurons\n",
        "model_1 = Sequential()\n",
        "model_1.add(Dense(units=4, activation='relu', input_shape=(4,)))  # Input layer with 4 inputs\n",
        "model_1.add(Dense(units=3, activation='softmax'))  # Output layer with 3 outputs for classification\n",
        "\n",
        "# Compile the model\n",
        "model_1.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "\n",
        "# Training the model\n",
        "history_1 = model_1.fit(X_train, y_train, epochs=60, batch_size=32, validation_data=(X_test, y_test))\n",
        "\n",
        "# Evaluate the model\n",
        "test_accuracy_1 = model_1.evaluate(X_test, y_test)[1]\n",
        "print(f\"Test Loss: {score[0]}, Test Accuracy: {score[1]}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eSuZ7Q0F8Ktn",
        "outputId": "fbdb3ece-91b5-403b-81ba-aa9790e13aa5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/60\n",
            "5/5 [==============================] - 1s 82ms/step - loss: 1.1924 - accuracy: 0.3733 - val_loss: 1.1882 - val_accuracy: 0.3533\n",
            "Epoch 2/60\n",
            "5/5 [==============================] - 0s 20ms/step - loss: 1.1863 - accuracy: 0.3667 - val_loss: 1.1830 - val_accuracy: 0.3667\n",
            "Epoch 3/60\n",
            "5/5 [==============================] - 0s 37ms/step - loss: 1.1807 - accuracy: 0.3667 - val_loss: 1.1780 - val_accuracy: 0.3800\n",
            "Epoch 4/60\n",
            "5/5 [==============================] - 0s 20ms/step - loss: 1.1759 - accuracy: 0.3800 - val_loss: 1.1730 - val_accuracy: 0.3733\n",
            "Epoch 5/60\n",
            "5/5 [==============================] - 0s 44ms/step - loss: 1.1715 - accuracy: 0.3733 - val_loss: 1.1683 - val_accuracy: 0.3733\n",
            "Epoch 6/60\n",
            "5/5 [==============================] - 0s 42ms/step - loss: 1.1669 - accuracy: 0.3733 - val_loss: 1.1640 - val_accuracy: 0.3733\n",
            "Epoch 7/60\n",
            "5/5 [==============================] - 0s 41ms/step - loss: 1.1626 - accuracy: 0.3733 - val_loss: 1.1598 - val_accuracy: 0.3800\n",
            "Epoch 8/60\n",
            "5/5 [==============================] - 0s 47ms/step - loss: 1.1586 - accuracy: 0.3867 - val_loss: 1.1559 - val_accuracy: 0.3867\n",
            "Epoch 9/60\n",
            "5/5 [==============================] - 0s 37ms/step - loss: 1.1548 - accuracy: 0.3867 - val_loss: 1.1522 - val_accuracy: 0.3867\n",
            "Epoch 10/60\n",
            "5/5 [==============================] - 0s 42ms/step - loss: 1.1514 - accuracy: 0.3867 - val_loss: 1.1486 - val_accuracy: 0.3800\n",
            "Epoch 11/60\n",
            "5/5 [==============================] - 0s 35ms/step - loss: 1.1474 - accuracy: 0.3800 - val_loss: 1.1456 - val_accuracy: 0.3800\n",
            "Epoch 12/60\n",
            "5/5 [==============================] - 0s 38ms/step - loss: 1.1444 - accuracy: 0.3733 - val_loss: 1.1425 - val_accuracy: 0.3733\n",
            "Epoch 13/60\n",
            "5/5 [==============================] - 0s 19ms/step - loss: 1.1416 - accuracy: 0.3800 - val_loss: 1.1395 - val_accuracy: 0.3867\n",
            "Epoch 14/60\n",
            "5/5 [==============================] - 0s 17ms/step - loss: 1.1386 - accuracy: 0.3800 - val_loss: 1.1368 - val_accuracy: 0.3733\n",
            "Epoch 15/60\n",
            "5/5 [==============================] - 0s 15ms/step - loss: 1.1356 - accuracy: 0.3733 - val_loss: 1.1342 - val_accuracy: 0.3733\n",
            "Epoch 16/60\n",
            "5/5 [==============================] - 0s 17ms/step - loss: 1.1335 - accuracy: 0.3733 - val_loss: 1.1315 - val_accuracy: 0.3733\n",
            "Epoch 17/60\n",
            "5/5 [==============================] - 0s 19ms/step - loss: 1.1309 - accuracy: 0.3733 - val_loss: 1.1289 - val_accuracy: 0.3733\n",
            "Epoch 18/60\n",
            "5/5 [==============================] - 0s 16ms/step - loss: 1.1280 - accuracy: 0.3733 - val_loss: 1.1267 - val_accuracy: 0.3733\n",
            "Epoch 19/60\n",
            "5/5 [==============================] - 0s 15ms/step - loss: 1.1257 - accuracy: 0.3733 - val_loss: 1.1246 - val_accuracy: 0.3600\n",
            "Epoch 20/60\n",
            "5/5 [==============================] - 0s 18ms/step - loss: 1.1237 - accuracy: 0.3600 - val_loss: 1.1226 - val_accuracy: 0.3533\n",
            "Epoch 21/60\n",
            "5/5 [==============================] - 0s 17ms/step - loss: 1.1220 - accuracy: 0.3533 - val_loss: 1.1205 - val_accuracy: 0.3467\n",
            "Epoch 22/60\n",
            "5/5 [==============================] - 0s 19ms/step - loss: 1.1198 - accuracy: 0.3467 - val_loss: 1.1186 - val_accuracy: 0.3467\n",
            "Epoch 23/60\n",
            "5/5 [==============================] - 0s 19ms/step - loss: 1.1184 - accuracy: 0.3467 - val_loss: 1.1167 - val_accuracy: 0.3467\n",
            "Epoch 24/60\n",
            "5/5 [==============================] - 0s 18ms/step - loss: 1.1162 - accuracy: 0.3467 - val_loss: 1.1151 - val_accuracy: 0.3467\n",
            "Epoch 25/60\n",
            "5/5 [==============================] - 0s 19ms/step - loss: 1.1145 - accuracy: 0.3467 - val_loss: 1.1137 - val_accuracy: 0.3467\n",
            "Epoch 26/60\n",
            "5/5 [==============================] - 0s 16ms/step - loss: 1.1131 - accuracy: 0.3467 - val_loss: 1.1123 - val_accuracy: 0.3467\n",
            "Epoch 27/60\n",
            "5/5 [==============================] - 0s 15ms/step - loss: 1.1118 - accuracy: 0.3467 - val_loss: 1.1108 - val_accuracy: 0.3400\n",
            "Epoch 28/60\n",
            "5/5 [==============================] - 0s 15ms/step - loss: 1.1105 - accuracy: 0.3400 - val_loss: 1.1094 - val_accuracy: 0.3400\n",
            "Epoch 29/60\n",
            "5/5 [==============================] - 0s 17ms/step - loss: 1.1089 - accuracy: 0.3400 - val_loss: 1.1083 - val_accuracy: 0.3400\n",
            "Epoch 30/60\n",
            "5/5 [==============================] - 0s 18ms/step - loss: 1.1079 - accuracy: 0.3400 - val_loss: 1.1070 - val_accuracy: 0.3400\n",
            "Epoch 31/60\n",
            "5/5 [==============================] - 0s 16ms/step - loss: 1.1066 - accuracy: 0.3467 - val_loss: 1.1059 - val_accuracy: 0.3467\n",
            "Epoch 32/60\n",
            "5/5 [==============================] - 0s 15ms/step - loss: 1.1056 - accuracy: 0.3533 - val_loss: 1.1048 - val_accuracy: 0.3533\n",
            "Epoch 33/60\n",
            "5/5 [==============================] - 0s 15ms/step - loss: 1.1044 - accuracy: 0.3533 - val_loss: 1.1038 - val_accuracy: 0.3467\n",
            "Epoch 34/60\n",
            "5/5 [==============================] - 0s 16ms/step - loss: 1.1036 - accuracy: 0.3467 - val_loss: 1.1028 - val_accuracy: 0.3467\n",
            "Epoch 35/60\n",
            "5/5 [==============================] - 0s 18ms/step - loss: 1.1024 - accuracy: 0.3467 - val_loss: 1.1018 - val_accuracy: 0.3467\n",
            "Epoch 36/60\n",
            "5/5 [==============================] - 0s 29ms/step - loss: 1.1016 - accuracy: 0.3467 - val_loss: 1.1009 - val_accuracy: 0.3467\n",
            "Epoch 37/60\n",
            "5/5 [==============================] - 0s 17ms/step - loss: 1.1007 - accuracy: 0.3467 - val_loss: 1.1000 - val_accuracy: 0.3400\n",
            "Epoch 38/60\n",
            "5/5 [==============================] - 0s 19ms/step - loss: 1.0997 - accuracy: 0.3400 - val_loss: 1.0992 - val_accuracy: 0.3467\n",
            "Epoch 39/60\n",
            "5/5 [==============================] - 0s 28ms/step - loss: 1.0989 - accuracy: 0.3467 - val_loss: 1.0984 - val_accuracy: 0.3400\n",
            "Epoch 40/60\n",
            "5/5 [==============================] - 0s 17ms/step - loss: 1.0981 - accuracy: 0.3400 - val_loss: 1.0976 - val_accuracy: 0.3400\n",
            "Epoch 41/60\n",
            "5/5 [==============================] - 0s 17ms/step - loss: 1.0974 - accuracy: 0.3467 - val_loss: 1.0969 - val_accuracy: 0.3467\n",
            "Epoch 42/60\n",
            "5/5 [==============================] - 0s 50ms/step - loss: 1.0969 - accuracy: 0.3467 - val_loss: 1.0961 - val_accuracy: 0.3533\n",
            "Epoch 43/60\n",
            "5/5 [==============================] - 0s 39ms/step - loss: 1.0960 - accuracy: 0.3533 - val_loss: 1.0956 - val_accuracy: 0.3533\n",
            "Epoch 44/60\n",
            "5/5 [==============================] - 0s 23ms/step - loss: 1.0954 - accuracy: 0.3533 - val_loss: 1.0950 - val_accuracy: 0.3467\n",
            "Epoch 45/60\n",
            "5/5 [==============================] - 0s 17ms/step - loss: 1.0950 - accuracy: 0.3467 - val_loss: 1.0943 - val_accuracy: 0.3467\n",
            "Epoch 46/60\n",
            "5/5 [==============================] - 0s 12ms/step - loss: 1.0943 - accuracy: 0.3533 - val_loss: 1.0939 - val_accuracy: 0.3533\n",
            "Epoch 47/60\n",
            "5/5 [==============================] - 0s 18ms/step - loss: 1.0937 - accuracy: 0.3533 - val_loss: 1.0933 - val_accuracy: 0.3533\n",
            "Epoch 48/60\n",
            "5/5 [==============================] - 0s 25ms/step - loss: 1.0932 - accuracy: 0.3533 - val_loss: 1.0928 - val_accuracy: 0.3533\n",
            "Epoch 49/60\n",
            "5/5 [==============================] - 0s 36ms/step - loss: 1.0927 - accuracy: 0.3533 - val_loss: 1.0923 - val_accuracy: 0.3533\n",
            "Epoch 50/60\n",
            "5/5 [==============================] - 0s 22ms/step - loss: 1.0922 - accuracy: 0.3533 - val_loss: 1.0918 - val_accuracy: 0.3533\n",
            "Epoch 51/60\n",
            "5/5 [==============================] - 0s 31ms/step - loss: 1.0917 - accuracy: 0.3533 - val_loss: 1.0913 - val_accuracy: 0.3533\n",
            "Epoch 52/60\n",
            "5/5 [==============================] - 0s 18ms/step - loss: 1.0912 - accuracy: 0.3533 - val_loss: 1.0908 - val_accuracy: 0.3533\n",
            "Epoch 53/60\n",
            "5/5 [==============================] - 0s 21ms/step - loss: 1.0907 - accuracy: 0.3533 - val_loss: 1.0904 - val_accuracy: 0.3533\n",
            "Epoch 54/60\n",
            "5/5 [==============================] - 0s 20ms/step - loss: 1.0903 - accuracy: 0.3533 - val_loss: 1.0899 - val_accuracy: 0.3533\n",
            "Epoch 55/60\n",
            "5/5 [==============================] - 0s 19ms/step - loss: 1.0899 - accuracy: 0.3600 - val_loss: 1.0895 - val_accuracy: 0.3600\n",
            "Epoch 56/60\n",
            "5/5 [==============================] - 0s 18ms/step - loss: 1.0895 - accuracy: 0.3600 - val_loss: 1.0890 - val_accuracy: 0.3600\n",
            "Epoch 57/60\n",
            "5/5 [==============================] - 0s 19ms/step - loss: 1.0890 - accuracy: 0.3600 - val_loss: 1.0886 - val_accuracy: 0.3600\n",
            "Epoch 58/60\n",
            "5/5 [==============================] - 0s 17ms/step - loss: 1.0886 - accuracy: 0.3600 - val_loss: 1.0883 - val_accuracy: 0.3600\n",
            "Epoch 59/60\n",
            "5/5 [==============================] - 0s 22ms/step - loss: 1.0883 - accuracy: 0.3600 - val_loss: 1.0879 - val_accuracy: 0.3600\n",
            "Epoch 60/60\n",
            "5/5 [==============================] - 0s 20ms/step - loss: 1.0880 - accuracy: 0.3600 - val_loss: 1.0876 - val_accuracy: 0.3600\n",
            "5/5 [==============================] - 0s 3ms/step - loss: 1.0876 - accuracy: 0.3600\n",
            "Test Loss: 0.9314011931419373, Test Accuracy: 0.5600000023841858\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming X_train, X_test, y_train, y_test are already defined and appropriate for the Iris dataset\n",
        "model = Sequential()\n",
        "model.add(Dense(50, activation='relu'))  # Adjust input_dim to match your dataset\n",
        "model.add(Dense(100, activation='relu'))  # Second hidden layer\n",
        "model.add(Dense(150, activation='relu'))  # Third hidden layer\n",
        "model.add(Dense(4, activation='softmax'))  # Output layer for 3-class classification\n",
        "\n",
        "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "\n",
        "# Train the model\n",
        "model.fit(X_train, y_train, epochs=60, batch_size=32)\n",
        "\n",
        "# Evaluate the model\n",
        "score = model.evaluate(X_test, y_test, batch_size=32)\n",
        "print(f\"Test Loss: {score[0]}, Test Accuracy: {score[1]}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "piLkAiQ89ct5",
        "outputId": "5c02f6f5-61a2-4c05-9917-995b4af1b902"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/60\n",
            "5/5 [==============================] - 1s 4ms/step - loss: 1.0990 - accuracy: 0.3800\n",
            "Epoch 2/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0877 - accuracy: 0.4067\n",
            "Epoch 3/60\n",
            "5/5 [==============================] - 0s 3ms/step - loss: 1.0802 - accuracy: 0.3933\n",
            "Epoch 4/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0743 - accuracy: 0.4000\n",
            "Epoch 5/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0706 - accuracy: 0.4267\n",
            "Epoch 6/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0680 - accuracy: 0.4133\n",
            "Epoch 7/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0646 - accuracy: 0.4200\n",
            "Epoch 8/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0618 - accuracy: 0.4200\n",
            "Epoch 9/60\n",
            "5/5 [==============================] - 0s 5ms/step - loss: 1.0597 - accuracy: 0.4267\n",
            "Epoch 10/60\n",
            "5/5 [==============================] - 0s 3ms/step - loss: 1.0573 - accuracy: 0.4267\n",
            "Epoch 11/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0545 - accuracy: 0.4400\n",
            "Epoch 12/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0523 - accuracy: 0.4467\n",
            "Epoch 13/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0508 - accuracy: 0.4467\n",
            "Epoch 14/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0482 - accuracy: 0.4400\n",
            "Epoch 15/60\n",
            "5/5 [==============================] - 0s 5ms/step - loss: 1.0467 - accuracy: 0.4533\n",
            "Epoch 16/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0440 - accuracy: 0.4467\n",
            "Epoch 17/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0421 - accuracy: 0.4733\n",
            "Epoch 18/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0400 - accuracy: 0.4733\n",
            "Epoch 19/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0378 - accuracy: 0.4667\n",
            "Epoch 20/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0358 - accuracy: 0.4667\n",
            "Epoch 21/60\n",
            "5/5 [==============================] - 0s 5ms/step - loss: 1.0336 - accuracy: 0.4733\n",
            "Epoch 22/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0316 - accuracy: 0.4733\n",
            "Epoch 23/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0288 - accuracy: 0.4733\n",
            "Epoch 24/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0270 - accuracy: 0.4800\n",
            "Epoch 25/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0242 - accuracy: 0.4800\n",
            "Epoch 26/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0215 - accuracy: 0.4867\n",
            "Epoch 27/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0194 - accuracy: 0.4733\n",
            "Epoch 28/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0174 - accuracy: 0.4667\n",
            "Epoch 29/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0153 - accuracy: 0.4667\n",
            "Epoch 30/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0113 - accuracy: 0.4733\n",
            "Epoch 31/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0084 - accuracy: 0.4733\n",
            "Epoch 32/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 1.0057 - accuracy: 0.4867\n",
            "Epoch 33/60\n",
            "5/5 [==============================] - 0s 3ms/step - loss: 1.0029 - accuracy: 0.4933\n",
            "Epoch 34/60\n",
            "5/5 [==============================] - 0s 6ms/step - loss: 1.0013 - accuracy: 0.4867\n",
            "Epoch 35/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9989 - accuracy: 0.4933\n",
            "Epoch 36/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9953 - accuracy: 0.5000\n",
            "Epoch 37/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9922 - accuracy: 0.5067\n",
            "Epoch 38/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9889 - accuracy: 0.5200\n",
            "Epoch 39/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9865 - accuracy: 0.5267\n",
            "Epoch 40/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9834 - accuracy: 0.5200\n",
            "Epoch 41/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9805 - accuracy: 0.5200\n",
            "Epoch 42/60\n",
            "5/5 [==============================] - 0s 5ms/step - loss: 0.9775 - accuracy: 0.5333\n",
            "Epoch 43/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9748 - accuracy: 0.5333\n",
            "Epoch 44/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9716 - accuracy: 0.5467\n",
            "Epoch 45/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9684 - accuracy: 0.5467\n",
            "Epoch 46/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9652 - accuracy: 0.5533\n",
            "Epoch 47/60\n",
            "5/5 [==============================] - 0s 5ms/step - loss: 0.9617 - accuracy: 0.5400\n",
            "Epoch 48/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9583 - accuracy: 0.5533\n",
            "Epoch 49/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9558 - accuracy: 0.5467\n",
            "Epoch 50/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9519 - accuracy: 0.5467\n",
            "Epoch 51/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9485 - accuracy: 0.5533\n",
            "Epoch 52/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9447 - accuracy: 0.5667\n",
            "Epoch 53/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9412 - accuracy: 0.5600\n",
            "Epoch 54/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9384 - accuracy: 0.5667\n",
            "Epoch 55/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9336 - accuracy: 0.5667\n",
            "Epoch 56/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9309 - accuracy: 0.5733\n",
            "Epoch 57/60\n",
            "5/5 [==============================] - 0s 3ms/step - loss: 0.9266 - accuracy: 0.5933\n",
            "Epoch 58/60\n",
            "5/5 [==============================] - 0s 5ms/step - loss: 0.9225 - accuracy: 0.5933\n",
            "Epoch 59/60\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9181 - accuracy: 0.6000\n",
            "Epoch 60/60\n",
            "5/5 [==============================] - 0s 6ms/step - loss: 0.9140 - accuracy: 0.6000\n",
            "5/5 [==============================] - 0s 4ms/step - loss: 0.9095 - accuracy: 0.6000\n",
            "Test Loss: 0.909529447555542, Test Accuracy: 0.6000000238418579\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's sum up the results, but it seems model 2 is the winner: E\n",
        "\n",
        "### Model 1 (Fewer Hidden Layers/Neurons)\n",
        "- **Training Performance**: The training accuracy starts at around 37.33% and fluctuates, reaching approximately 36% by the end of 60 epochs. The validation accuracy shows a similar pattern.\n",
        "- **Test Performance**: The test accuracy is around 56% indicates moderate performance.\n",
        "- **Observations**: This model shows a gradual learning trend, but the accuracy plateaus, suggesting potential underfitting. The model might not have enough complexity to fully capture the relationships in the data.\n",
        "\n",
        "### Model 2 (More Hidden Layers/Neurons)\n",
        "- **Training Performance**: The accuracy begins at around 38% and shows a more consistent upward trend, reaching about 60% by the 60th epoch. This indicates a steady learning process.\n",
        "- **Test Performance**: The test accuracy is 60%, closely matching the training accuracy. This suggests that the model has a good balance between learning the training data and generalizing to new data.\n",
        "- **Observations**: Model 2 demonstrates a better fit to the data compared to Model 1. The increased complexity with more hidden layers seems to contribute to a more effective learning process.\n",
        "\n",
        "### Predictive Strength and Best Model Choice\n",
        "- **Model Comparison**: Model 2 outperforms Model 1 in terms of both training and test accuracy, suggesting that the additional complexity in Model 2 is beneficial for this particular dataset.\n",
        "- **Best Model**: Model 2 is the better model, given its higher accuracy and more consistent learning pattern. The improvement in performance from Model 1 to Model 2 suggests that the additional layers help in capturing more complex patterns in the data. What makes model 2 shinning is the fact it is gradually learning in an exponential way, whereas model 1 is slower due to its simplicity\n",
        "\n",
        "- **Considerations for Improvement**: While Model 2 shows improved performance, a 60% accuracy indicates there is still room for improvement. Experimenting with further hyperparameter tuning, additional layers, or different architectures might yield better results. Additionally, considering other aspects like feature engineering or data augmentation (if applicable) might enhance model performance.\n",
        "\n",
        "In summary, the extended training with 60 epochs reveals that Model 2, with more hidden layers, is better suited for this dataset, demonstrating a stronger predictive performance. However, the moderate accuracy of both models suggests that further optimization or a different approach might be necessary to achieve higher accuracy.\n",
        "\n",
        "This assigments gives two signals:\n",
        "\n",
        "1) Better train and fit the data with hyperparameters when it's very simple as it could offer potential complex resuls, with the machine able to learn more over time\n",
        "\n",
        "2) Keep the parameters simple when dealing with many features of different nature / distribution / variance as this could lead the machine to misunderstood the variables natures, leading to potential overfit."
      ],
      "metadata": {
        "id": "aMxjaRry_-t_"
      }
    }
  ]
}
